if(NOT ZEPHYR_SDK_INSTALL_DIR)
  set(ZEPHYR_SDK_INSTALL_DIR $ENV{ZEPHYR_SDK_INSTALL_DIR})
endif()
set(ZEPHYR_SDK_INSTALL_DIR ${ZEPHYR_SDK_INSTALL_DIR} CACHE PATH "Zephyr SDK install directory")
if(NOT ZEPHYR_SDK_INSTALL_DIR)
  message(FATAL_ERROR "ZEPHYR_SDK_INSTALL_DIR is not set")
endif()

set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR ${ARCH})

#TODO: SDK version check
set(TOOLCHAIN_VENDOR zephyr)
set(TOOLCHAIN_ARCH x86_64)

if(MINGW)
  set(TOOLCHAIN_HOME ${ZEPHYR_SDK_INSTALL_DIR}/sysroots/i686-pokysdk-mingw32)
else()
  set(TOOLCHAIN_HOME ${ZEPHYR_SDK_INSTALL_DIR}/sysroots/${TOOLCHAIN_ARCH}-pokysdk-linux)
endif()

# TODO fetch from environment
if("${ARCH}" STREQUAL "arm")
  set(CROSS_COMPILE_TARGET arm-${TOOLCHAIN_VENDOR}-eabi)
  set(SYSROOT_TARGET armv5-${TOOLCHAIN_VENDOR}-eabi)
  set(CROSS_COMPILE ${TOOLCHAIN_HOME}/usr/bin/${CROSS_COMPILE_TARGET}/${CROSS_COMPILE_TARGET}-)

elseif("${ARCH}" STREQUAL "arc")
  set(CROSS_COMPILE_TARGET arc-${TOOLCHAIN_VENDOR}-elf)
  set(SYSROOT_TARGET arc-${TOOLCHAIN_VENDOR}-elf)
  set(CROSS_COMPILE ${TOOLCHAIN_HOME}/usr/bin/${CROSS_COMPILE_TARGET}/${CROSS_COMPILE_TARGET}-)

elseif("${ARCH}" STREQUAL "iamcu")
  set(CROSS_COMPILE_TARGET i586-${TOOLCHAIN_VENDOR}-elfiamcu)
  set(SYSROOT_TARGET iamcu-${TOOLCHAIN_VENDOR}-elfiamcu)
  set(CROSS_COMPILE ${TOOLCHAIN_HOME}/usr/bin/${CROSS_COMPILE_TARGET}/${CROSS_COMPILE_TARGET}-)

elseif("${ARCH}" STREQUAL "x86")
  set(CROSS_COMPILE_TARGET i586-${TOOLCHAIN_VENDOR}-elf)
  set(SYSROOT_TARGET i586-${TOOLCHAIN_VENDOR}-elf)
  set(CROSS_COMPILE ${TOOLCHAIN_HOME}/usr/bin/${CROSS_COMPILE_TARGET}/${CROSS_COMPILE_TARGET}-)

elseif("${ARCH}" STREQUAL "nios2")
  set(CROSS_COMPILE_TARGET nios2-${TOOLCHAIN_VENDOR}-elf)
  set(SYSROOT_TARGET nios2-${TOOLCHAIN_VENDOR}-elf)
  set(CROSS_COMPILE ${TOOLCHAIN_HOME}/usr/bin/${CROSS_COMPILE_TARGET}/${CROSS_COMPILE_TARGET}-)

elseif("${ARCH}" STREQUAL "xtensa")
  set(CROSS_COMPILE_TARGET xtensa-${TOOLCHAIN_VENDOR}-elf)
  set(SYSROOT_TARGET xtensa-${TOOLCHAIN_VENDOR}-elf)
  set(CROSS_COMPILE ${TOOLCHAIN_HOME}/usr/bin/${CROSS_COMPILE_TARGET}/${CROSS_COMPILE_TARGET}-)

elseif("${ARCH}" STREQUAL "riscv32")
  set(CROSS_COMPILE_TARGET riscv32-${TOOLCHAIN_VENDOR}-elf)
  set(SYSROOT_TARGET riscv32-${TOOLCHAIN_VENDOR}-elf)
  set(CROSS_COMPILE ${TOOLCHAIN_HOME}/usr/bin/${CROSS_COMPILE_TARGET}/${CROSS_COMPILE_TARGET}-)

endif()

set(CMAKE_C_COMPILER ${CROSS_COMPILE}gcc)

execute_process(
  COMMAND ${CMAKE_C_COMPILER} --print-file-name=include
  OUTPUT_VARIABLE _OUTPUT
)
string(REGEX REPLACE "\n" "" _OUTPUT ${_OUTPUT})
list(APPEND NOSTDINC ${_OUTPUT})

execute_process(
  COMMAND ${CMAKE_C_COMPILER} --print-file-name=include-fixed
  OUTPUT_VARIABLE _OUTPUT
)
string(REGEX REPLACE "\n" "" _OUTPUT ${_OUTPUT})
list(APPEND NOSTDINC ${_OUTPUT})

if(TOOLCHAIN_DO_PASS2 AND TARGET zephyr)
  get_property(ZEPHYR_C_FLAGS TARGET zephyr PROPERTY COMPILE_OPTIONS)
  list(FILTER ZEPHYR_C_FLAGS EXCLUDE REGEX "\\$<.*>") # remove generator expressions

  execute_process(
    COMMAND ${CMAKE_C_COMPILER} ${ZEPHYR_C_FLAGS} --sysroot ${ZEPHYR_SDK_INSTALL_DIR}/sysroots/${SYSROOT_TARGET} --print-libgcc-file-name
    OUTPUT_VARIABLE LIBGCC_DIR
    OUTPUT_STRIP_TRAILING_WHITESPACE
  )

  get_filename_component(LIBGCC_DIR ${LIBGCC_DIR} DIRECTORY)

  set(LIB_INCLUDE_DIR -L${LIBGCC_DIR})
  set(TOOLCHAIN_LIBS gcc)
else()
  set(TOOLCHAIN_DO_PASS2 ON)
endif()

set(DTC ${TOOLCHAIN_HOME}/usr/bin/dtc)

set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

set(BUILD_SHARED_LIBS OFF)
