if(NOT GCCARMEMB_TOOLCHAIN_PATH)
  set(GCCARMEMB_TOOLCHAIN_PATH $ENV{GCCARMEMB_TOOLCHAIN_PATH})
endif()

find_program(GCCARMEMB arm-none-eabi-gcc HINTS ${GCCARMEMB_TOOLCHAIN_PATH}/bin)

if(NOT GCCARMEMB)
  message(FATAL_ERROR "GCCARMEMB compiler not found, set GCCARMEMB_TOOLCHAIN_PATH")
endif()

set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR ${ARCH})

set(CMAKE_C_COMPILER ${GCCARMEMB})

execute_process(
  COMMAND ${CMAKE_C_COMPILER} --print-file-name=include
  OUTPUT_VARIABLE _OUTPUT
)
string(REGEX REPLACE "\n" "" _OUTPUT ${_OUTPUT})
list(APPEND NOSTDINC ${_OUTPUT})

if(TOOLCHAIN_DO_PASS2 AND TARGET zephyr)
  get_property(ZEPHYR_C_FLAGS TARGET zephyr PROPERTY COMPILE_OPTIONS)
  list(FILTER ZEPHYR_C_FLAGS EXCLUDE REGEX "\\$<.*>") # remove generator expressions

  execute_process(
    COMMAND ${CMAKE_C_COMPILER} ${ZEPHYR_C_FLAGS} --print-libgcc-file-name
    OUTPUT_VARIABLE LIBGCC_DIR
    OUTPUT_STRIP_TRAILING_WHITESPACE
  )

  get_filename_component(LIBGCC_DIR ${LIBGCC_DIR} DIRECTORY)

  set(LIB_INCLUDE_DIR -L"${LIBGCC_DIR}")
  set(TOOLCHAIN_LIBS gcc)
else()
  set(TOOLCHAIN_DO_PASS2 ON)
endif()

set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

set(BUILD_SHARED_LIBS OFF)

set(COMPILER gcc)
